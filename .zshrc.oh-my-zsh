# If you come from bash you might have to change your $PATH.
# export N_PREFIX=$HOME/.cache/nodejs
# export npm_config_prefix="$HOME/.local"

# PATH=$N_PREFIX/bin:$PATH
PATH=${KREW_ROOT:-$HOME/.krew}/bin:$PATH
PATH=$(go env GOPATH)/bin:$PATH
PATH=$HOME/bin:/usr/local/bin:$HOME/.local/bin:$PATH
PATH=$HOME/work/forks/pest:$PATH
PATH=/opt/flutter/bin:$PATH
export PATH

# Path to your oh-my-zsh installation.
export ZSH=$HOME/sources/oh-my-zsh

# ENV VARIABLES
export GPG_TTY=$(tty)
export GEM_HOME="$HOME/.cache/gems"
export WLR_DRM_NO_MODIFIERS=1
export AWS_VAULT_BACKEND="file"
export FLUX_FORWARD_NAMESPACE="terminators"
export CHROME_EXECUTABLE="chromium"

# Set name of the theme to load. Optionally, if you set this to "random"
# it'll load a random theme each time that oh-my-zsh is loaded.
# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes
#ZSH_THEME="robbyrussell"
#ZSH_THEME="random"
#ZSH_THEME="seba"
#ZSH_THEME="amuse"

# Set list of themes to load
# Setting this variable when ZSH_THEME=random
# cause zsh load theme from this variable instead of
# looking in ~/.oh-my-zsh/themes/
# An empty array have no effect
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" "jnrowe" "jreese" "amuse" )

# Must use Powerline font, for \uE0A0 to render.
ZSH_THEME_GIT_PROMPT_PREFIX=" on %{$fg[magenta]%}\uE0A0 "
ZSH_THEME_GIT_PROMPT_SUFFIX="%{$reset_color%}"
ZSH_THEME_GIT_PROMPT_DIRTY="%{$fg[red]%}!"
ZSH_THEME_GIT_PROMPT_UNTRACKED="%{$fg[green]%}?"
ZSH_THEME_GIT_PROMPT_CLEAN=""

# Prompt
# https://jlk.fjfi.cvut.cz/arch/manpages/man/zshmisc.1#EXPANSION_OF_PROMPT_SEQUENCES
## Exit status in green if successful or red if failure
PROMPT='%(?.%{$bg[green]%}%{$fg_bold[black]%}.%{$bg_bold[red]%})%?%{$reset_color%}'
## Last two directories
PROMPT=$PROMPT' %{$fg_bold[green]%}%2~%{$reset_color%}'
## Git status
PROMPT=$PROMPT' $(git_prompt_info)'
## Time and special char if shell is running with privileged permissions
PROMPT=$PROMPT' %{$fg_bold[red]%}[%*]%{$reset_color%} %# '
## Right side k8s line
RPROMPT='$(kube_ps1)'

# Uncomment the following line to use case-sensitive completion.
CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion. Case
# sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
    git
#    archlinux
#    aws
    battery
    colored-man-pages
    colorize
    cp
    docker
    emacs
    git-extras
    github
    gnu-utils
    jsontools
    kubectl
    kube-ps1
    man
    mix
    python
    rebar
    ssh-agent
    sudo
    systemd
    kubetail
)

# ssh
# zstyle :omz:plugins:ssh-agent identities id_rsa id_rsa2 id_github
#zstyle :omz:plugins:ssh-agent agent-forwarding on
# export SSH_KEY_PATH="~/.ssh/rsa_id"
# export SSH_AUTH_SOCK="$XDG_RUNTIME_DIR/ssh-agent.socket"

# No beep sounds
unsetopt BEEP

source $ZSH/oh-my-zsh.sh

# User configuration

export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
export EDITOR='/bin/emacs -nw'

# Compilation flags
export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

if [[ -s $HOME/.aliases ]]; then
    source $HOME/.aliases
fi

if [[ -s /usr/share/fzf/completion.zsh ]]; then
    source /usr/share/fzf/completion.zsh
fi

# Completion colours
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}

# Alphanumeric sort of file completion
zstyle ':completion:*' file-sort dummyvalue

# Grouped command completion
zstyle ':completion:*:*:-command-:*:*' group-order alias builtins functions commands

# Completion for kitty
kitty + complete setup zsh | source /dev/stdin

# Completion for sshoot
eval "$(register-python-argcomplete sshoot)"

# Completion for bazel
fpath[1,0]=~/.zsh/completions/

# Enable erlang/kerl by default
. $HOME/.cache/erlang/OTP-26.0.1/activate

function find_ip() {
    aws ec2 describe-network-interfaces --filters "Name=addresses.private-ip-address,Values=$1"
}

export NVM_DIR="$HOME/.nvm"
# [ -s "/usr/share/nvm/init-nvm.sh" ] && \. "/usr/share/nvm/init-nvm.sh"
# [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion


# Retrieve and cache the AWS SSO access token.
awslogin() {
    aws sso login --sso-session wgtwo
}

# Export credentials for the given profile as shell vars.
awshell() {
    profile="${1?Need to provide profile}"
    eval "$(aws --profile="$profile" configure export-credentials --format env)"
    export AWS_REGION="$(aws --profile="$profile" configure get region)"
}

# Clear the credentials from the exported shell vars.
awsclear() { unset AWS_SECRET_ACCESS_KEY AWS_ACCESS_KEY_ID AWS_CREDENTIAL_EXPIRATION AWS_SESSION_TOKEN AWS_REGION; }

# Clear the cached AWS SSO access token.
awslogout() { aws sso logout; }

# Run aws-vault commands for sso profiles without aws-vault.
aws-vault() {
    if [[ "$1" == "exec" ]] && [[ "$2" == "sso-"* ]] && [[ "$3" == "--" ]]
    then
        profile="$2"
        shift 3
        awshell "$profile" && bash -c "$*"
        awsclear
    else
        command aws-vault "$@"
    fi
}

PATH="$HOME/perl5/bin${PATH:+:${PATH}}"; export PATH;
PERL5LIB="$HOME/perl5/lib/perl5${PERL5LIB:+:${PERL5LIB}}"; export PERL5LIB;
PERL_LOCAL_LIB_ROOT="$HOME/perl5${PERL_LOCAL_LIB_ROOT:+:${PERL_LOCAL_LIB_ROOT}}"; export PERL_LOCAL_LIB_ROOT;
PERL_MB_OPT="--install_base \"$HOME/perl5\""; export PERL_MB_OPT;
PERL_MM_OPT="INSTALL_BASE=$HOME/perl5"; export PERL_MM_OPT;
